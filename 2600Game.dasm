;------------------------------------------------
;
; untitled
; Atari VCS Game 
; Created by Jacob McCanty and Stevie Yakkel on 2014-01-12.
;
; Copyright (c) 2014 __MyCompanyName__. All rights reserved.
;
; Use with joystick controllers
;
;------------------------------------------------
	processor 	6502
	include 	vcs.h
	include 	macro.h

;------------------------------------------------
; Constants
;------------------------------------------------
BLACK = #$00

PF_REFLECT = %00000001
PF_BALL_SIZE4 = %00100000
PLAYER1G =	%11111111
PLAYER_RIGHT = %11110000
PLAYER_LEFT = %00010000
PLAYER2_RIGHT = %00001111
PLAYER2_LEFT = %00000001

;------------------------------------------------
; RAM
;------------------------------------------------
    SEG.U   variables
    ORG     $80

bgcolor				.byte
frame				.byte
score				.byte
starting_value_lo	.byte
starting_value_hi	.byte
horiz       		.byte
vert        		.byte
pv					.byte
p2v					.byte
loopCounter			.byte
;------------------------------------------------
; Start of ROM
;------------------------------------------------
	SEG   Bank0
	ORG   $F000       	; 4k ROM start point

Start 
	CLEAN_START			; Clear RAM and Registers
	
	;lda                	#PF_REFLECT | PF_BALL_SIZE4
    ;sta                	CTRLPF
    ;lda                	#2
    ;sta                	ENABL
    
    lda                	#0
    sta                	horiz
    lda                	#30
    sta                	vert
	sta					pv
	lda					#45
	sta					p2v

	lda				  	#%00000000
	sta				  	GRP0
	lda				  	#$C3
	sta 				COLUP0
	
	lda				  	#%00000000
	sta				  	GRP1
	lda				  	#$40
	sta 				COLUP1
	
	lda                	#$80
    sta                	COLUBK

	lda                	#$47
    sta                	COLUPF
	lda				   	#%00000000
	sta					PF0
	sta					PF1
	sta					PF2 


;------------------------------------------------
; Vertical Blank
;------------------------------------------------
MainLoop
	lda		#0
	sta		VBLANK
	VERTICAL_SYNC
    lda     #43
    sta     TIM64T

	;***** Vertical Blank code goes here
	
	lda		#5
	sta		loopCounter
	
	;increment score
	clc
	sed
	lda                score
	adc                #1
	sta                score
	cld
	;calculate starting_value for low bits of score
	lda					score
	and					#%00001111
	;store current score
	sta					starting_value_lo
	;multiply it by 4
	asl
	asl
	
	clc
	adc					starting_value_lo
	sta					starting_value_lo
	;Calculate starting x for the hi bits
	lda					score
	;Shifts the 4 hi bits to the right, 4 places
	lsr
	lsr
	lsr
	lsr
	;store current score
	sta					starting_value_hi
	;multiply it by 4
	clc
	asl
	asl
	
	clc
	adc					starting_value_hi
	sta					starting_value_hi
.spriteStuff
	lda		SWCHA
	and		#%10011111
	beq		.spriteDiagUpR
	lda		SWCHA
	and		#%01011111
	beq		.spriteDiagUpL
	lda		SWCHA
	and		#%10101111
	beq		.spriteDiagDownR
	lda		SWCHA
	and		#%01101111
	beq		.spriteDiagDownL
	lda		SWCHA
	and		#%10001111
	beq		.spriteRight
	lda		SWCHA
	and		#%01001111
	beq		.spriteLeft
	lda		SWCHA
	and		#%00011111
	beq		.spriteUp
	lda		SWCHA
	and		#%00101111
	beq		.spriteDown
	jmp		.spriteStuff2

.spriteDiagUpR
	inc		pv
	lda		#PLAYER_RIGHT
	sta		HMP0
	jmp		.spriteStuff2
.spriteDiagDownR
	dec		pv
	lda		#PLAYER_RIGHT
	sta		HMP0
	jmp		.spriteStuff2
.spriteDiagUpL
	inc		pv
	lda		#PLAYER_LEFT
	sta		HMP0
	jmp		.spriteStuff2
.spriteDiagDownL
	dec		pv
	lda		#PLAYER_LEFT
	sta		HMP0
	jmp		.spriteStuff2
.spriteDown
	dec		pv
	jmp		.spriteStuff2
.spriteUp
	inc		pv
	jmp		.spriteStuff2
.spriteRight
	;00010000 moves left 1
	;1001000  moves right 1
	;follow this pattern when using HMOVE
	;sta	WSYNC
	;sta	HMOVE
	lda		#PLAYER_RIGHT
	sta		HMP0
	jmp		.spriteStuff2

.spriteLeft

	lda		#PLAYER_LEFT
	sta		HMP0
	
.spriteStuff2
	lda		SWCHA
	and		#%00001000
	beq		.spriteDiagUpR2
	lda		SWCHA
	and		#%00001000
	beq		.spriteDiagUpL2
	lda		SWCHA
	and		#%00001000
	beq		.spriteDiagDownR2
	lda		SWCHA
	and		#%00001000
	beq		.spriteDiagDownL2
	lda		SWCHA
	and		#%00001000
	beq		.spriteRight2
	lda		SWCHA
	and		#%00001000
	beq		.spriteLeft2
	lda		SWCHA
	and		#%00001000
	beq		.spriteUp2
	lda		SWCHA
	and		#%00001000
	beq		.spriteDown2
	jmp		.waitForVBlank

.spriteDiagUpR2
	inc		p2v
	lda		#PLAYER2_RIGHT
	sta		HMP1
	jmp		.hmove2
.spriteDiagDownR2
	dec		p2v
	lda		#PLAYER2_RIGHT
	sta		HMP1
	jmp		.hmove2
.spriteDiagUpL2
	inc		p2v
	lda		#PLAYER2_LEFT
	sta		HMP1
	jmp		.hmove2
.spriteDiagDownL2
	dec		p2v
	lda		#PLAYER2_LEFT
	sta		HMP1
	jmp		.hmove2
.spriteDown2
	dec		p2v
	jmp		.hmove2
.spriteUp2
	inc		p2v
	jmp		.hmove2
.spriteRight2
	;00010000 moves left 1
	;1001000  moves right 1
	;follow this pattern when using HMOVE
	;sta	WSYNC
	;sta	HMOVE
	lda		#PLAYER2_RIGHT
	sta		HMP1
	jmp		.hmove2

.spriteLeft2

	lda		#PLAYER2_LEFT
	sta		HMP1

.hmove2
	sta		WSYNC
	sta		HMOVE
	

.waitForVBlank
	lda		INTIM
	bne		.waitForVBlank
	sta		WSYNC

;------------------------------------------------
; Kernel
;------------------------------------------------	
DrawScreen
;Kernel goes here

	ldx				starting_value_hi
	lda				.zero_left,x
.drawScore
	sta				PF1
	sta				WSYNC
	
	sta				WSYNC
	inx
	lda				.zero_left,x
	sta				PF1
	dec				loopCounter
	bne				.drawScore
	
;drawing top of playfield
	lda             #%11111111
	sta             PF0
	sta             PF1
	sta             PF2
    
	sta				WSYNC
	sta				WSYNC
	sta				WSYNC
	sta				WSYNC
	sta				WSYNC
	sta				WSYNC
	ldx 			#169
	lda             #PF_REFLECT | PF_BALL_SIZE4
    sta             CTRLPF
	jmp				.playfieldLoop
	
.enableSprite
	lda				#PLAYER1G
	sta				GRP0
	jmp				.playfieldLoop2

.disableSprite
	lda				#%00000000
	sta				GRP0
	jmp				.playfieldLoop2
.enableSprite2
	lda				#PLAYER1G
	sta				GRP1
	jmp				.continueplayfieldloop

.disableSprite2
	lda				#%00000000
	sta				GRP1
	jmp				.continueplayfieldloop

.playfieldLoop
	txa
	sbc				pv
	adc				#5
	bcs				.enableSprite
	jmp				.disableSprite
.playfieldLoop2
	txa
	sbc				p2v
	adc				#5
	bcs				.enableSprite2
	jmp				.disableSprite2
	
.continueplayfieldloop
	sta				WSYNC
    lda            	#%00110000
    sta             PF0
	lda             #0
	sta				PF1
    sta             PF2
	dex
	bne				.playfieldLoop

.endplayfieldloop
;drawing bottom of playfield
	lda             #%11111111
	sta             PF0
	sta             PF1
	sta             PF2
	
	sta				WSYNC
	sta				WSYNC
	sta				WSYNC
	sta				WSYNC
	sta				WSYNC
	sta				WSYNC
	sta				WSYNC
	sta				WSYNC
	

;.scanline
;	dex
;	sta		WSYNC
;	bne		.scanline

;------------------------------------------------
; Overscan
;------------------------------------------------
	lda		#%01000010
	sta		VBLANK
    lda		#36
    sta		TIM64T

	;***** Overscan Code goes here
	lda		#%00000000
	sta		HMP0
	lda			#%00000000
	sta			CTRLPF

.waitForOverscan
	lda     INTIM
	bne     .waitForOverscan

	jmp		MainLoop

;------------------------------------------------
; ROM Tables
;------------------------------------------------
;***** ROM tables go here
.zero_left
        .byte        %00011111
        .byte        %01011111
        .byte        %01011111
        .byte        %01011111
        .byte        %00011111

.one_left
        .byte        %10111111
        .byte        %00111111
        .byte        %10111111
        .byte        %10111111
        .byte        %00011111

.two_left
        .byte        %00011111
        .byte        %11011111
        .byte        %00011111
        .byte        %01111111
        .byte        %00011111

.three_left
        .byte        %00011111
        .byte        %11011111
        .byte        %00011111
        .byte        %11011111
        .byte        %00011111

.four_left
        .byte        %01011111
        .byte        %01011111
        .byte        %00011111
        .byte        %11011111
        .byte        %11011111

.five_left
        .byte        %00011111
        .byte        %01111111
        .byte        %00011111
        .byte        %11011111
        .byte        %00011111

.six_left
        .byte        %00011111
        .byte        %01111111
        .byte        %00011111
        .byte        %01011111
        .byte        %00011111

.seven_left
        .byte        %00011111
        .byte        %11011111
        .byte        %11011111
        .byte        %11011111
        .byte        %11011111

.eight_left
        .byte        %00011111
        .byte        %01011111
        .byte        %00011111
        .byte        %01011111
        .byte        %00011111

.nine_left
        .byte        %00011111
        .byte        %01011111
        .byte        %00011111
        .byte        %11011111
        .byte        %00011111


;------------------------------------------------
; Interrupt Vectors
;------------------------------------------------
	echo [*-$F000]d, " ROM bytes used"
	ORG    $FFFA
	.word  Start         ; NMI
	.word  Start         ; RESET
	.word  Start         ; IRQ
    
	END